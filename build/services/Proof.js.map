{"version":3,"file":"Proof.js","sourceRoot":"","sources":["../../src/services/Proof.ts"],"names":[],"mappings":";;;;;;;;;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,mCAAmC,CAAC,CAAC;AAG3E,kDAAoC;AAIpC,MAAM,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC;AAE9B,MAAa,KAAK;IAKhB,YAAY,KAAoF;QAC9F,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAE,SAAS,EAAyB;QACrD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACxD,MAAM,KAAK,GAAW,MAAM,IAAI,OAAO,CAAC,CAAC,OAAiB,EAAE,MAAgB,EAAE,EAAE;YAC9E,GAAG,CAAC,IAAI,CACN,IAAI,EACJ,IAAI,CAAC,UAAU,EACf;gBACE,SAAS,EAAE,OAAO;gBAClB,SAAS,EAAE,YAAY;aACxB,EACD,CAAC,GAAU,EAAE,OAAe,EAAE,EAAE;gBAC9B,IAAI,GAAG,EAAE;oBACP,MAAM,CAAC,GAAG,CAAC,CAAC;iBACb;qBAAM;oBACL,OAAO,CAAC,OAAO,CAAC,CAAC;iBAClB;YACH,CAAC,CACF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,IAAI;YACJ,KAAK;SACN,CAAC;IACJ,CAAC;CACF;AAlCD,sBAkCC","sourcesContent":["const debug = require(\"debug-logger\")(\"Web-Monetization-Middleware:Proof\");\nimport { WebMonetizeStore } from \"../lib/stores/WebMonetizeStore/WebMonetizeStore\";\n\nimport * as jwt from \"jsonwebtoken\";\nimport * as crypto from \"crypto\";\nimport uuid from \"uuid/v4\";\n\nconst PROOF_EXPIRY = 3 * 1000;\n\nexport class Proof {\n  private webMonetizeStore: WebMonetizeStore;\n  private privateKey: string;\n  public publicKey: string;\n\n  constructor(props: { webMonetizeStore: WebMonetizeStore; privateKey: string; publicKey: string }) {\n    Object.assign(this, props);\n  }\n\n  async getProofData({ requestId }: { requestId: string }) {\n    const data = await this.webMonetizeStore.get(requestId);\n    const token: string = await new Promise((resolve: Function, reject: Function) => {\n      jwt.sign(\n        data,\n        this.privateKey,\n        {\n          algorithm: \"ES256\",\n          expiresIn: PROOF_EXPIRY,\n        },\n        (err: Error, encoded: string) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(encoded);\n          }\n        }\n      );\n    });\n\n    return {\n      data,\n      token,\n    };\n  }\n}\n"]}