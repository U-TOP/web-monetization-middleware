{"version":3,"file":"Monetize.js","sourceRoot":"","sources":["../../src/services/Monetize.ts"],"names":[],"mappings":"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","sourcesContent":["const debug = require(\"debug-logger\")(\"Web-Monetization-Middleware:Monetize\");\n\nimport { Config } from \"./Config\";\nimport { SPSP, SPSPDetail } from \"./SPSP\";\n\nimport { ConnectionTag } from \"./ConnectionTag\";\nimport { PaymentTag } from \"./PaymentTag\";\n\nimport { Plugins } from \"./Plugins\";\nimport { Proof } from \"./Proof\";\nimport { Payout } from \"./Payout\";\n\nimport { WebMonetizeStore } from \"../lib/stores/WebMonetizeStore/WebMonetizeStore\";\nimport { WebMonetizeMemoryStore } from \"../lib/stores/WebMonetizeStore/WebMonetizeMemoryStore\";\nimport { WebMonetizeRedisStore } from \"../lib/stores/WebMonetizeStore/WebMonetizeRedisStore\";\n\nimport { WebPayoutStore } from \"../lib/stores/WebPayoutStore/WebPayoutStore\";\nimport { WebPayoutMemoryStore } from \"../lib/stores/WebPayoutStore/WebPayoutMemoryStore\";\nimport { WebPayoutRedisStore } from \"../lib/stores/WebPayoutStore/WebPayoutRedisStore\";\n\nimport Redis from \"ioredis\";\n\nexport class Monetize {\n  public readonly config: Config;\n\n  public readonly webMonetizeStore: WebMonetizeStore;\n  public readonly webPayoutStore: WebPayoutStore;\n\n  private readonly connectionTag: ConnectionTag;\n  private readonly paymentTag: PaymentTag;\n\n  private readonly plugins: Plugins;\n  public readonly proof: Proof;\n  private readonly payout: Payout;\n\n  public readonly spsp: SPSP;\n  \n  public connected: boolean = false;\n\n  constructor(config?: Config) {\n    // config\n    // ----------------------------\n    this.config = config || new Config();\n\n    // WebMonetizeStore\n    // ----------------------------\n    if (this.config.webMonetizeStore == \"WebMonetizeMemoryStore\") {\n      this.webMonetizeStore = new WebMonetizeMemoryStore();\n    } else if (this.config.webMonetizeStore == \"WebMonetizeRedisStore\") {\n      debug.log(\"use redis for WebMonetizeStore\");\n\n      // redis client\n      // ----------------------------\n      const redis = new Redis({\n        host: process.env.REDIS_HOST || \"127.0.0.1\",\n        port: process.env.REDIS_PORT ? parseInt(process.env.REDIS_PORT) : 6379,\n        password: process.env.REDIS_PASSWORD,\n      });\n\n      this.webMonetizeStore = new WebMonetizeRedisStore(redis);\n    } else {\n      throw new Error(\"Invalid WebMonetizeStore setting\");\n    }\n\n    // WebPayoutStore\n    // ----------------------------\n    if (this.config.webPayoutStore == \"WebPayoutMemoryStore\") {\n      this.webPayoutStore = new WebPayoutMemoryStore();\n    } else if (this.config.webPayoutStore == \"WebPayoutRedisStore\") {\n      debug.log(\"use redis for WebPayoutRedisStore\");\n\n      // redis client\n      // ----------------------------\n      const redis = new Redis({\n        host: process.env.REDIS_HOST || \"127.0.0.1\",\n        port: process.env.REDIS_PORT ? parseInt(process.env.REDIS_PORT) : 6379,\n        password: process.env.REDIS_PASSWORD,\n      });\n\n      this.webPayoutStore = new WebPayoutRedisStore(redis);\n    } else {\n      throw new Error(\"Invalid WebPayoutStore setting\");\n    }\n\n    // connectionTag\n    // ----------------------------\n    this.connectionTag = new ConnectionTag(this.config.connectionTagKey);\n\n    // paymentTag\n    // ----------------------------\n    this.paymentTag = new PaymentTag(this.config.paymentTagKey);\n\n    // ilp plugings\n    // ----------------------------\n    this.plugins = new Plugins();\n\n    // payout\n    // ----------------------------\n    this.payout = new Payout(this.plugins);\n\n    // proof\n    // ----------------------------\n    this.proof = new Proof({\n      webMonetizeStore: this.webMonetizeStore,\n      privateKey: this.config.proofPrivateKey,\n      publicKey: this.config.proofPublicKey,\n    });\n\n    // spsp\n    // ----------------------------\n    this.spsp = new SPSP({\n      spspInstanceId: this.config.spspInstanceId,\n      plugins: this.plugins,\n      payout: this.payout,\n      connectionTag: this.connectionTag,\n      paymentTag: this.paymentTag,\n      webMonetizeStore: this.webMonetizeStore,\n      webPayoutStore: this.webPayoutStore,\n    });\n  }\n\n  async start() {\n    debug(\"Monetize start\");\n    await this.webMonetizeStore.open();\n    await this.webPayoutStore.open();\n    await this.spsp.start();\n    this.connected = true;\n  }\n\n  async end() {\n    debug(\"Monetize end\");\n    await this.webMonetizeStore.close();\n    await this.webPayoutStore.close();\n    await this.spsp.close();\n    this.connected = false;\n  }\n}\n"]}