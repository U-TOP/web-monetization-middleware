{"version":3,"file":"SPSP.js","sourceRoot":"","sources":["../../src/services/SPSP.ts"],"names":[],"mappings":"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","sourcesContent":["const debug = require(\"debug-logger\")(\"Web-Monetization-Middleware:SPSP\");\n\nimport { ConnectionTag } from \"./ConnectionTag\";\nimport { PaymentTag } from \"./PaymentTag\";\n\nimport { Proof } from \"./Proof\";\nimport { Plugins } from \"./Plugins\";\nimport { Payout } from \"./Payout\";\n\nimport { WebMonetizeStore } from \"../lib/stores/WebMonetizeStore/WebMonetizeStore\";\nimport { WebPayoutStore } from \"../lib/stores/WebPayoutStore/WebPayoutStore\";\n\nimport { createServer, DataAndMoneyStream, Server } from \"ilp-protocol-stream\";\nimport uuid from \"uuid/v4\";\nimport deepEqual from \"deep-equal\";\nimport * as jwt from \"jsonwebtoken\";\nimport * as crypto from \"crypto\";\n\nexport interface SPSPDetail {\n  destination_account: string;\n  shared_secret: string;\n}\n\nexport class SPSP {\n  private spspInstanceId: string;\n\n  private webMonetizeStore: WebMonetizeStore;\n  private webPayoutStore: WebPayoutStore;\n\n  private connectionTag: ConnectionTag;\n  private paymentTag: PaymentTag;\n\n  private plugins: Plugins;\n  private payout: Payout;\n\n  private streamServer: Server;\n\n  constructor(props: {\n    spspInstanceId: string;\n    webMonetizeStore: WebMonetizeStore;\n    webPayoutStore: WebPayoutStore;\n    connectionTag: ConnectionTag;\n    paymentTag: PaymentTag;\n    plugins: Plugins;\n    payout: Payout;\n  }) {\n    Object.assign(this, props);\n  }\n\n  async close() {\n    await this.streamServer.close();\n  }\n\n  async start() {\n    this.streamServer = await createServer({\n      // TODO: add isConnected to type in ilp-plugin repo\n      plugin: this.plugins.create() as any,\n    });\n\n    this.streamServer.on(\"connection\", async connection => {\n      // get params from metadata\n      // ---------------------------------\n      const metadata = JSON.parse(this.connectionTag.decode(connection.connectionTag));\n      const paymentPointer = metadata.pp;\n      const requestId = metadata.requestId;\n      const paymentId = metadata.paymentId;\n      const spspInstanceId = metadata.spspInstanceId;\n\n      debug(\"connection with metadata\", JSON.stringify(metadata));\n\n      // is exist webMonetizeStore\n      // ---------------------------------\n      const existing = await this.webMonetizeStore.get(requestId);\n      const existingMetadata = existing && existing.metadata;\n      if (existingMetadata && !deepEqual(existingMetadata, metadata)) {\n        debug.error(\"connection with conflicting metadata\", existingMetadata, metadata);\n        connection.destroy();\n        return;\n      }\n\n      // onStream\n      // ---------------------------------\n      const onStream = (stream: DataAndMoneyStream) => {\n        stream.setReceiveMax(Infinity);\n\n        // onMoney\n        // ---------------------------------\n        const onMoney = async (amount: string) => {\n          debug(\"received money \", requestId, amount);\n\n          // pp(paymentPointer)がmetadetaに含まれないのは実装上ありえないはず\n          // ---------------------------------\n          if (!metadata.pp) {\n            debug.warn(\"The paymentpointer is not included in the metadata.This monetization is not payout\");\n            return;\n          }\n\n          // 将来的なspsp 転送負荷分散の為の実装\n          // spsp instance idで自身が発行したspspDetailのみpaymentに加算していく\n          // 同一のspspInstanceIdで複数のSPSPを起動すると、spspをListenしている情報を全て加算してしまうため処理分けを行う\n          // ---------------------------------\n          if (spspInstanceId !== this.spspInstanceId) return;\n\n          // webMonetizeStoreに加算\n          // ---------------------------------\n          this.webMonetizeStore.add(requestId, Number(amount), metadata);\n\n          // addMonetizedTotal\n          // ---------------------------------\n          await this.webPayoutStore.addMonetizedTotal(paymentId, Number(amount));\n          debug(\"addTotal\", amount);\n\n          // 受け取ったmonetizeのpayout(転送)\n          // ---------------------------------\n          await this.payout.send(metadata.pp, Number(amount));\n\n          // addPayoutTotal\n          // ---------------------------------\n          await this.webPayoutStore.addPayoutTotal(paymentId, Number(amount));\n          debug(\"addPayoutTotal\", amount);\n        };\n\n        const onClose = () => cleanUp();\n        const onError = () => cleanUp();\n        const cleanUp = () => {\n          setImmediate(() => {\n            stream.removeListener(\"money\", onMoney);\n            stream.removeListener(\"close\", onClose);\n            stream.removeListener(\"error\", onError);\n          });\n        };\n\n        stream.on(\"money\", onMoney);\n        stream.on(\"close\", onClose);\n        stream.on(\"error\", onError);\n      };\n\n      const onClose = () => cleanUp();\n      const onError = () => cleanUp();\n      const cleanUp = () => {\n        setImmediate(() => {\n          connection.removeListener(\"stream\", onStream);\n          connection.removeListener(\"close\", onClose);\n          connection.removeListener(\"error\", onError);\n        });\n      };\n\n      connection.on(\"close\", onClose);\n      connection.on(\"error\", onError);\n      connection.on(\"stream\", onStream);\n    });\n  }\n\n  async getPaymentTag({ paymentPointer, paymentId }: { paymentPointer: string; paymentId: string }) {\n    const paymentTag = {\n      paymentPointer,\n      paymentId,\n    };\n    return this.paymentTag.encode(JSON.stringify(paymentTag));\n  }\n\n  async getSPSPDetail({ paymentTag, requestId }: { paymentTag: string; requestId: string }): Promise<SPSPDetail> {\n    // parse encryptedPaymentTag\n    // ---------------------------------\n    const { paymentPointer, paymentId } = JSON.parse(this.paymentTag.decode(paymentTag));\n\n    // paymentIdからPaymentPersistStoreを準備、極力高速なKVSが望ましい(get,putが30ms以下程度)\n    // ---------------------------------\n    const paymentEntry = await this.webPayoutStore.get(paymentId);\n    debug(\"paymentEntry\", paymentEntry);\n\n    // spspTag\n    // ---------------------------------\n    const spspParams = {\n      pp: paymentPointer,\n      requestId,\n      paymentId,\n      spspInstanceId: this.spspInstanceId, // SPSPを請負う自身のIDを追加\n    };\n    debug(\"spspParams\", spspParams);\n\n    // create connectionTag\n    // ---------------------------------\n    const metadata = this.connectionTag.encode(JSON.stringify(spspParams));\n    debug(\"spspTag metadata\", metadata);\n\n    // metadataを含めたspsp detailを生成\n    // ---------------------------------\n    const { destinationAccount, sharedSecret } = this.streamServer.generateAddressAndSecret(metadata);\n    debug(\"destinationAccount\", destinationAccount);\n    debug(\"sharedSecret\", sharedSecret);\n\n    return {\n      destination_account: destinationAccount,\n      shared_secret: sharedSecret.toString(\"base64\"),\n    };\n  }\n}\n"]}