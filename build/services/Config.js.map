{"version":3,"file":"Config.js","sourceRoot":"","sources":["../../src/services/Config.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,oCAAoC,CAAC,CAAC;AAE5E,+CAAiC;AACjC,iDAA2B;AAE3B,MAAM,KAAK,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEhC,MAAa,MAAM;IAqBjB;QApBgB,SAAI,GAAW,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,WAAW,CAAC;QAC/C,SAAI,GAAW,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC;QAC1C,qBAAgB,GAAY,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,MAAM,CAAC;QAEtE,mBAAc,GAAW,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,YAAI,EAAE,CAAC;QAEhE,0BAAqB,GAAW,OAAO,CAAC,GAAG,CAAC,uBAAwB,CAAC;QACrE,qBAAgB,GAAW,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,YAAI,EAAE,CAAC;QAEpE,kBAAa,GAAW,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACjG,qBAAgB,GAC9B,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAE9D,qBAAgB,GAAW,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,wBAAwB,CAAC;QACtF,mBAAc,GAAW,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,sBAAsB,CAAC;QAExF,oBAAe,GAAkB,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,IAAI,CAAC;QAK7E,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC1G,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;CACF;AA1BD,wBA0BC","sourcesContent":["const debug = require(\"debug-logger\")(\"Web-Monetization-Middleware:Config\");\n\nimport * as crypto from \"crypto\";\nimport uuid from \"uuid/v4\";\n// import { ECKey } from \"ec-key\";\nconst ECKey = require(\"ec-key\");\n\nexport class Config {\n  public readonly host: string = process.env.HOST || \"localhost\";\n  public readonly port: string = process.env.PORT || \"8080\";\n  public readonly allowCrossOrigin: boolean = process.env.ALLOW_CROSS_ORIGIN === \"true\";\n\n  public readonly spspInstanceId: string = process.env.SPSP_INSTANCE_ID || uuid();\n\n  public readonly examplePaymentPointer: string = process.env.EXAMPLE_PAYMENT_POINTER!;\n  public readonly examplePaymentId: string = process.env.EXAMPLE_PAYMENT_ID || uuid();\n\n  public readonly paymentTagKey: string = process.env.PAYMENT_TAG_KEY || crypto.randomBytes(32).toString(\"base64\");\n  public readonly connectionTagKey: string =\n    process.env.CONNECTION_TAG_KEY || crypto.randomBytes(32).toString(\"base64\");\n\n  public readonly webMonetizeStore: string = process.env.WEB_MONETIZE_STORE || \"WebMonetizeMemoryStore\";\n  public readonly webPayoutStore: string = process.env.WEB_PAYOUT_STORE || \"WebPayoutMemoryStore\";\n\n  private proofKeyEntropy: string | null = process.env.PROOF_KEY_ENTROPY || null; // Create a new ECKey instance from a base-64 spki string\n  public readonly proofPrivateKey: string; // use jsonwebtoken, pem format string\n  public readonly proofPublicKey: string; // use jsonwebtoken, pem format string\n\n  constructor() {\n    const ecKey = this.proofKeyEntropy ? new ECKey(this.proofKeyEntropy, \"spki\") : ECKey.createECKey(\"P-256\");\n    this.proofPrivateKey = ecKey.toString(\"pem\");\n    this.proofPublicKey = ecKey.asPublicECKey().toString(\"pem\");\n  }\n}\n"]}