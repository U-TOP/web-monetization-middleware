{"version":3,"file":"ConnectionTag.js","sourceRoot":"","sources":["../../src/services/ConnectionTag.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+CAAiC;AACjC,0DAAkC;AAElC,MAAa,aAAa;IAGxB,YAAY,gBAAwB;QAClC,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,IAAY;QACjB,MAAM,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAClC,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE/E,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;QAChC,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC;QAErD,OAAO,mBAAS,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,eAAuB;QAC5B,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;QACxD,MAAM,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAClC,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;QACvC,MAAM,SAAS,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;QAE1C,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACtE,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAEzB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE3E,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;CACF;AA/BD,sCA+BC","sourcesContent":["import * as crypto from \"crypto\";\nimport base64url from \"base64url\";\n\nexport class ConnectionTag {\n  private key: Buffer;\n\n  constructor(connectionTagKey: string) {\n    this.key = Buffer.from(connectionTagKey, \"base64\");\n  }\n\n  encode(data: string) {\n    const iv = crypto.randomBytes(12);\n    const cipher = crypto.createCipheriv(\"aes-256-gcm\", this.key, iv);\n    const encrypted = Buffer.concat([cipher.update(data, \"utf8\"), cipher.final()]);\n\n    const tag = cipher.getAuthTag();\n    const complete = Buffer.concat([tag, iv, encrypted]);\n\n    return base64url(complete);\n  }\n\n  decode(completeEncoded: string) {\n    const complete = Buffer.from(completeEncoded, \"base64\");\n    const tag = complete.slice(0, 16);\n    const iv = complete.slice(16, 16 + 12);\n    const encrypted = complete.slice(16 + 12);\n\n    const decipher = crypto.createDecipheriv(\"aes-256-gcm\", this.key, iv);\n    decipher.setAuthTag(tag);\n\n    const data = Buffer.concat([decipher.update(encrypted), decipher.final()]);\n\n    return data.toString(\"utf8\");\n  }\n}\n"]}