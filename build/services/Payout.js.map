{"version":3,"file":"Payout.js","sourceRoot":"","sources":["../../src/services/Payout.ts"],"names":[],"mappings":";;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,oCAAoC,CAAC,CAAC;AAG5E,8DAA2D;AAE3D,MAAM,eAAe,GAAG,EAAE,GAAG,IAAI,CAAC;AAElC,MAAa,MAAM;IASjB,YAAoB,OAAgB;QAAhB,YAAO,GAAP,OAAO,CAAS;QAClC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAED,IAAI,CAAC,cAAsB,EAAE,MAAc;QACzC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG;gBAC7B,UAAU,EAAE,IAAI,mCAAgB,CAAC;oBAC/B,OAAO,EAAE,cAAc;oBACvB,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;iBAChC,CAAC;gBACF,QAAQ,EAAE,IAAI,CAAC,GAAG,EAAE;gBACpB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,eAAe,CAAC;aACvD,CAAC;SACH;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;SACpD;QAED,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACrD,KAAK,CAAC,cAAc,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;IAChD,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAAC,cAAsB;QACvD,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,QAAQ,GAAG,eAAe,CAAC;QACjE,MAAM,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;QAE1C,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,MAAM,EAAE;gBACX,OAAO,CAAC,KAAK,CAAC,mCAAmC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;aACtG;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YACpC,MAAM,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;SACjC;aAAM;YACL,MAAM,aAAa,GAAG,eAAe,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;YACvE,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;SAC/C;IACH,CAAC;IAEO,SAAS,CAAC,cAAsB,EAAE,QAAgB;QACxD,OAAO,UAAU,CAAC,GAAG,EAAE;YACrB,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,CAAQ,EAAE,EAAE;gBAC3D,OAAO,CAAC,KAAK,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACL,CAAC,EAAE,QAAQ,CAAC,CAAC;IACf,CAAC;CACF;AA5DD,wBA4DC","sourcesContent":["const debug = require(\"debug-logger\")(\"Web-Monetization-Middleware:Payout\");\n\nimport { Plugins } from \"./Plugins\";\nimport { PayoutConnection } from \"../lib/PayoutConnection\";\n\nconst CLEANUP_TIMEOUT = 30 * 1000;\n\nexport class Payout {\n  private payouts: {\n    [pointer: string]: {\n      connection: PayoutConnection;\n      lastSent: number;\n      timer: NodeJS.Timer;\n    };\n  };\n\n  constructor(private plugins: Plugins) {\n    this.payouts = {};\n  }\n\n  send(paymentPointer: string, amount: number) {\n    if (!this.payouts[paymentPointer]) {\n      this.payouts[paymentPointer] = {\n        connection: new PayoutConnection({\n          pointer: paymentPointer,\n          plugin: this.plugins.create({}),\n        }),\n        lastSent: Date.now(),\n        timer: this.makeTimer(paymentPointer, CLEANUP_TIMEOUT),\n      };\n    } else {\n      this.payouts[paymentPointer].lastSent = Date.now();\n    }\n\n    this.payouts[paymentPointer].connection.send(amount);\n    debug(\"payout money\", amount, paymentPointer);\n  }\n\n  private async expirePaymentPointer(paymentPointer: string) {\n    const payout = this.payouts[paymentPointer];\n    if (!payout) {\n      return;\n    }\n\n    const isExpired = Date.now() - payout.lastSent > CLEANUP_TIMEOUT;\n    const isIdle = payout.connection.isIdle();\n\n    if (isExpired) {\n      if (!isIdle) {\n        console.error(\"closing payout that was not idle.\", JSON.stringify(payout.connection.getDebugInfo()));\n      }\n\n      delete this.payouts[paymentPointer];\n      await payout.connection.close();\n    } else {\n      const msUntilExpiry = CLEANUP_TIMEOUT - (Date.now() - payout.lastSent);\n      this.makeTimer(paymentPointer, msUntilExpiry);\n    }\n  }\n\n  private makeTimer(paymentPointer: string, duration: number) {\n    return setTimeout(() => {\n      this.expirePaymentPointer(paymentPointer).catch((e: Error) => {\n        console.error(\"failed to clean up payout.\", e);\n      });\n    }, duration);\n  }\n}\n"]}