{"version":3,"file":"WebMonetizeStore.js","sourceRoot":"","sources":["../../../../src/lib/stores/WebMonetizeStore/WebMonetizeStore.ts"],"names":[],"mappings":";;AAAA,MAAM,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAU1C,MAAsB,gBAAgB;IACpC,gBAAe,CAAC;IAQhB,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC;SACd;aAAM;YACL,MAAM,QAAQ,GAAG;gBACf,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;gBACR,IAAI,EAAE,CAAC;gBACP,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;aACf,CAAC;YAEnB,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;IAED,KAAK,CAAC,GAAG,CAAC,GAAW,EAAE,MAAc,EAAE,QAAgB;QACrD,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE5C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAE/E,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC1B,KAAK,CAAC,KAAK,IAAI,MAAM,CAAC;QACtB,KAAK,CAAC,KAAK,EAAE,CAAC;QACd,KAAK,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAGvC,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE;YACtC,KAAK,CAAC,IAAI,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;SACrE;aAAM;YACL,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;SAChB;QACD,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;CACF;AA7CD,4CA6CC","sourcesContent":["const BigNumber = require(\"bignumber.js\");\n\nexport interface MonetizeEntry {\n  total: number;\n  count: number;\n  rate: number; // To reduce the load, the past average rate is the entry rate.\n  timestamp: number;\n  metadata?: object;\n}\n\nexport abstract class WebMonetizeStore {\n  constructor() {}\n\n  abstract async open();\n  abstract async close();\n\n  protected abstract async putItem(key: string, entry: MonetizeEntry): Promise<void>;\n  public abstract async getItem(key: string): Promise<MonetizeEntry | null>;\n\n  async get(key: string): Promise<MonetizeEntry> {\n    const entry = await this.getItem(key);\n\n    if (entry) {\n      return entry;\n    } else {\n      const newEntry = {\n        total: 0,\n        count: 0,\n        rate: 0,\n        timestamp: new Date().getTime(),\n      } as MonetizeEntry;\n\n      return newEntry;\n    }\n  }\n\n  async add(key: string, amount: number, metadata: object): Promise<void> {\n    if (!key) throw new Error(\"key is invalid\");\n\n    const entry = await this.get(key);\n    if (!entry) throw new Error(\"item does not exist or has not been initialized\");\n\n    entry.metadata = metadata;\n    entry.total += amount;\n    entry.count++;\n    entry.timestamp = new Date().getTime();\n\n    // 負荷軽減の為、簡素なrate計算に変更\n    if (entry.count > 0 && entry.total > 0) {\n      entry.rate = new BigNumber(entry.total).div(entry.count).toNumber();\n    } else {\n      entry.rate = 0;\n    }\n    await this.putItem(key, entry);\n  }\n}\n"]}