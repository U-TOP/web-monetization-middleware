{"version":3,"file":"WebPayoutStore.js","sourceRoot":"","sources":["../../../../src/lib/stores/WebPayoutStore/WebPayoutStore.ts"],"names":[],"mappings":";;AAUA,MAAsB,cAAc;IAClC,gBAAe,CAAC;IAQhB,KAAK,CAAC,GAAG,CAAC,GAAW;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEtC,IAAI,KAAK,EAAE;YACT,OAAO,KAAK,CAAC;SACd;aAAM;YACL,MAAM,QAAQ,GAAG;gBACf,cAAc,EAAE,CAAC;gBACjB,cAAc,EAAE,CAAC;gBACjB,eAAe,EAAE,CAAC;gBAElB,WAAW,EAAE,CAAC;gBACd,WAAW,EAAE,CAAC;gBACd,YAAY,EAAE,CAAC;aACD,CAAC;YAEjB,OAAO,QAAQ,CAAC;SACjB;IACH,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,GAAW,EAAE,MAAc;QACjD,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE5C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAE/E,KAAK,CAAC,cAAc,IAAI,MAAM,CAAC;QAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,KAAK,CAAC,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC7C,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,GAAW,EAAE,MAAc;QAC9C,IAAI,CAAC,GAAG;YAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE5C,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QAE/E,KAAK,CAAC,WAAW,IAAI,MAAM,CAAC;QAC5B,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,KAAK,CAAC,YAAY,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC1C,MAAM,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IACjC,CAAC;CACF;AApDD,wCAoDC","sourcesContent":["export interface PayoutEntry {\n  monetizedTotal: number;\n  monetizedCount: number;\n  lastMonetizedAt: number;\n\n  payoutTotal: number;\n  payoutCount: number;\n  lastPayoutAt: number;\n}\n\nexport abstract class WebPayoutStore {\n  constructor() {}\n\n  abstract async open();\n  abstract async close();\n\n  protected abstract async putItem(key: string, entry: PayoutEntry): Promise<void>;\n  public abstract async getItem(key: string): Promise<PayoutEntry | null>;\n\n  async get(key: string): Promise<PayoutEntry> {\n    const entry = await this.getItem(key);\n\n    if (entry) {\n      return entry;\n    } else {\n      const newEntry = {\n        monetizedTotal: 0,\n        monetizedCount: 0,\n        lastMonetizedAt: 0,\n\n        payoutTotal: 0,\n        payoutCount: 0,\n        lastPayoutAt: 0,\n      } as PayoutEntry;\n\n      return newEntry;\n    }\n  }\n\n  async addMonetizedTotal(key: string, amount: number): Promise<void> {\n    if (!key) throw new Error(\"key is invalid\");\n\n    const entry = await this.get(key);\n    if (!entry) throw new Error(\"item does not exist or has not been initialized\");\n\n    entry.monetizedTotal += amount;\n    entry.monetizedCount++;\n    entry.lastMonetizedAt = new Date().getTime();\n    await this.putItem(key, entry);\n  }\n\n  async addPayoutTotal(key: string, amount: number): Promise<void> {\n    if (!key) throw new Error(\"key is invalid\");\n\n    const entry = await this.get(key);\n    if (!entry) throw new Error(\"item does not exist or has not been initialized\");\n\n    entry.payoutTotal += amount;\n    entry.payoutCount++;\n    entry.lastPayoutAt = new Date().getTime();\n    await this.putItem(key, entry);\n  }\n}\n"]}