{"version":3,"file":"PayoutConnection.js","sourceRoot":"","sources":["../../src/lib/PayoutConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import { createConnection, Connection, DataAndMoneyStream } from 'ilp-protocol-stream'\nimport { URL } from 'url'\nimport axios from 'axios'\n\nexport const resolvePaymentPointer = (pointer: string) => {\n  if (!pointer.startsWith('$')) {\n    return pointer\n  }\n\n  const parsed = new URL('https://' + pointer.substring(1))\n\n  if (parsed.pathname === '/') {\n    parsed.pathname = '/.well-known/pay'\n  }\n\n  return parsed.href\n}\n\nexport enum State {\n  DISCONNECTED,\n  CONNECTING,\n  IDLE,\n  SENDING\n}\n\nexport class PayoutConnection {\n  private pointer: string\n  private spspUrl: string\n  private connection?: Connection\n  private stream?: DataAndMoneyStream\n  private plugin: any\n\n  private state = State.DISCONNECTED\n  private closing = false\n\n  private target = 0\n  private sent = 0\n  private totalStreamAmount = 0\n\n  constructor ({ pointer, plugin }: { pointer: string, plugin: any }) {\n    this.pointer = pointer\n    this.spspUrl = resolvePaymentPointer(pointer)\n    this.plugin = plugin\n  }\n\n  getDebugInfo () {\n    return {\n      state: this.state,\n      target: this.target,\n      sent: this.sent,\n      streamSent: this.totalStreamAmount,\n      pointer: this.pointer\n    }\n  }\n\n  send (amount: number) {\n    if (this.closing) {\n      throw new Error('payout connection is closing')\n    }\n\n    this.target += amount\n\n    if ((this.getState() === State.SENDING ||\n      this.getState() === State.IDLE) &&\n      this.stream\n    ) {\n      this.setState(State.SENDING)\n      this.stream.setSendMax(this.getSendMax())\n    } else {\n      this.safeTrySending()\n    }\n  }\n\n  isIdle () {\n    return this.getState() === State.IDLE\n  }\n\n  async close () {\n    this.closing = true\n    if (this.connection) {\n      await this.connection.destroy()\n    }\n    await this.plugin.disconnect()\n  }\n\n  private async spspQuery () {\n    const { data } = await axios({\n      url: this.spspUrl,\n      method: 'GET',\n      headers: {\n        accept: 'application/spsp4+json'\n      }\n    })\n\n    return {\n      destinationAccount: data.destination_account,\n      sharedSecret: Buffer.from(data.shared_secret, 'base64')\n    }\n  }\n\n  private getSendMax () {\n    return this.target - this.sent\n  }\n\n  // appeases type checker\n  private getState () {\n    return this.state\n  }\n\n  private setState (state: State) {\n    this.state = state\n  }\n\n  private async safeTrySending () {\n    this.trySending()\n      .catch(() => {\n        // TODO: backoff\n        setTimeout(() => {\n          this.safeTrySending()\n        }, 2000)\n      })\n  }\n\n  private async trySending () {\n    if (this.getState() !== State.DISCONNECTED) {\n      return\n    }\n\n    this.setState(State.CONNECTING)\n\n    const spspParams = await this.spspQuery()\n    const connection = await createConnection({\n      plugin: this.plugin,\n      ...spspParams\n    })\n\n    const stream = connection.createStream()\n    this.stream = stream\n    this.connection = connection\n    const sendMax = this.getSendMax()\n\n    if (sendMax > 0) {\n      this.setState(State.SENDING)\n      stream.setSendMax(this.getSendMax())\n    } else {\n      this.setState(State.IDLE)\n    }\n\n    let appliedSent = false\n    this.totalStreamAmount = 0\n    const cleanUp = () => {\n      setImmediate(() => {\n        this.setState(State.DISCONNECTED)\n\n        stream.removeListener('close', onClose)\n        stream.removeListener('error', onError)\n        stream.removeListener('outgoing_money', onOutgoingMoney)\n        connection.removeListener('close', onClose)\n        connection.removeListener('error', onError)\n\n        if (!appliedSent) {\n          this.sent += this.totalStreamAmount\n        }\n\n        if (this.getSendMax() > 0) {\n          this.safeTrySending()\n        }\n      })\n    }\n\n    const onClose = () => cleanUp()\n    const onError = () => cleanUp()\n    const onOutgoingMoney = (amount: string) => {\n      this.totalStreamAmount += Number(amount)\n      if (this.totalStreamAmount + this.sent === this.target) {\n        this.setState(State.IDLE)\n      }\n    }\n\n    connection.on('close', onClose)\n    connection.on('error', onError)\n    stream.on('close', onClose)\n    stream.on('error', onError)\n    stream.on('outgoing_money', onOutgoingMoney)\n  }\n}\n"]}